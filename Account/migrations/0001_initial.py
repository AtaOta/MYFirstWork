# Generated by Django 3.1 on 2020-10-02 02:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number format '+919999999999' ", regex='^\\+?1?\\d{9,10}$')], verbose_name='Phone')),
                ('full_name', models.CharField(blank=True, default='', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceProviderProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SerV_name', models.CharField(max_length=50)),
                ('SerV_institutions_name', models.CharField(max_length=100)),
                ('SerV_service_type', models.CharField(choices=[('Grocery', 'Grocery'), ('Farm', 'Farm'), ('Medical', 'Medical'), ('Teaching', 'Teaching'), ('Transportation', 'Transportation'), ('Tech', 'Tech')], default='Grocery', max_length=100)),
                ('SerV_particular_profession', models.CharField(max_length=255)),
                ('SerV_birth_date', models.DateField(null=True)),
                ('SerV_age', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(12), django.core.validators.MaxValueValidator(80)])),
                ('SerV_address', models.CharField(default='', max_length=255)),
                ('SerV_phone_no', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^0?[5-9]{1}\\d{9}$')])),
                ('SerV_gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('TransGen', 'TransGen')], default='Male', max_length=10)),
                ('SerV_Profile_pick', models.ImageField(upload_to='ServProfile/ProfileImages')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SellerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Seller_name', models.CharField(max_length=50)),
                ('Seller_Store_name', models.CharField(max_length=100)),
                ('Seller_Store_type', models.CharField(choices=[('Grocery', 'Grocery'), ('Farm', 'Farm'), ('Medical', 'Medical'), ('Educational Product', 'Educational Product'), ('Electronics', 'Electronics'), ('', 'Tech')], default='Grocery', max_length=100)),
                ('Seller_particular_profession', models.CharField(max_length=255)),
                ('Seller_birth_date', models.DateField(null=True)),
                ('Seller_age', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(12), django.core.validators.MaxValueValidator(80)])),
                ('Seller_address', models.CharField(default='', max_length=255)),
                ('Seller_phone_no', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^0?[5-9]{1}\\d{9}$')])),
                ('Seller_gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('TransGen', 'TransGen')], default='Male', max_length=10)),
                ('Seller_Profile_pick', models.ImageField(upload_to='SellerProfile/ProfileImages')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NormalProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('age', models.IntegerField(default=12, validators=[django.core.validators.MinValueValidator(12)])),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('status', models.CharField(blank=True, default='I use this app to help others...', max_length=50, null=True)),
                ('phone_no', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator('^0?[5-9]{1}\\d{9}$')])),
                ('description', models.TextField(blank=True, null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('TransGen', 'TransGen')], default='Male', max_length=10)),
                ('profile_pick', models.ImageField(blank=True, null=True, upload_to='Profile/images')),
                ('profile_Background_pic', models.ImageField(blank=True, null=True, upload_to='Profile/background_Image')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FollowersFollowing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_by', models.ManyToManyField(related_name='following', to=settings.AUTH_USER_MODEL)),
                ('following_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
